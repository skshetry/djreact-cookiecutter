# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python
# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service


# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache


# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres

# To get Django tests to work you may need to create a settings file using
# the following DATABASES:
# 
# DATABASES = {
#     'default': {
#        'ENGINE': 'django.db.backends.postgresql_psycopg2',
#        'NAME': 'ci',
#        'USER': 'postgres',
#        'PASSWORD': 'postgres',
#        'HOST': 'postgres',
#        'PORT': '5432',
#    },
# }
#
# and then adding `--settings app.settings.ci` (or similar) to the test command
stages:
  - test

python_test:
  stage: test
  image: python:3.6.5-alpine3.7
  services:
  - postgres:latest
  variables:
  variables:
    POSTGRES_DB: database_name
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
  before_script:
  - python -V
  - pip install -r backend/requirements/testing.txt
  script:
  - cd backend && coverage run manage.py test --settings=sambad.settings.testing
  after_script:
  - coverage report


js_test:
  image: node:10.1.0-alpine
  stage: test
  before_script:
  - node -v
  - npm -v
  - npm install --dev
  script:
  - cd frontend && npm test
